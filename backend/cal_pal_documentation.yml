openapi: 3.0.0
servers: []
info:
  version: '1.0.0'
  title: cal-pal-api
  description: The API for CalPal, application for TCSS 460 Winter 2024
# HTTP requests:
paths:
  # Internally developed web services:
  /auth:
    post:
      tags:
        - authentication
      description: checks username and password for a match with database records.
      operationId: authenticate
      parameters:
        - in: query
          name: login
          schema:
            $ref: '#/components/schemas/Login'
          required: true
          description: login to be authenticated.
      responses:
        '200':
          description: authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: authentication failed - bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: authentication failed - input does not match our records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: authentication failed - internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /calendar:
    post:
      tags:
        - calendar
      summary: Create a calendar
      description: Adds a new calendar to the database.
      operationId: createCalendar
      requestBody:
        description: Calendar object to create
        content:
          application/json:
            schema:
              type: object
              description: an object containing the calendar to update.
              properties:
                calendar:
                  type: object
                  $ref: "#/components/schemas/Calendar"
      responses:
        '201':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: Success boolean and the new calendar object
                properties:
                  success: 
                    type: boolean
                  calendar:
                    type: object
                    $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid user session
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Calendar already exists
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - calendar
      summary: Update a calendar
      description: Updates the specified calendar in the database.
      operationId: updateCalendar
      requestBody:
        description: Calendar to update with its new values
        content:
          application/json:
            schema:
              type: object
              description: an object containing the calendar to update.
              properties:
                calendar:
                  type: object
                  $ref: "#/components/schemas/Calendar"
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: Success boolean and the updated calendar object
                properties:
                  success: 
                    type: boolean
                  calendar:
                    type: object
                    $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Current user is not authorized to edit this calendar
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Calendar does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /calendar/{id}:
    get:
      summary: Get a calendar
      tags:
        - calendar
      description: Retrieves a calendar by ID from the database.
      operationId: getCalendar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the calendar to retrieve
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: Success boolean and the calendar object
                properties:
                  success: 
                    type: boolean
                  calendar:
                    type: object
                    $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Calendar does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a calendar
      tags:
        - calendar
      description: Deletes a calendar by ID from the database.
      operationId: deleteCalendar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the calendar to delete
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: Success boolean and the deleted calendar object
                properties:
                  success: 
                    type: boolean
                  calendar:
                    type: object
                    $ref: '#/components/schemas/Calendar'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Current user is not authorized to delete this calendar
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Calendar does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /event:
    post:
      tags:
        - event
      summary: Create an event
      description: Creates an event in the specified calendar.
      operationId: createEvent
      requestBody:
        description: Event object to create and its calendar ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestBody'
      responses:
        '201':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventSuccessResponse'  
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid user session
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - event
      summary: Update an event
      description: Updates an event in the specified calendar.
      operationId: updateEvent
      requestBody:
        description: Event object to update and its calendar ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestBody'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventSuccessResponse'  
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid user session
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Event does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - event
      summary: Delete an event
      description: Deletes an event in the specified calendar.
      operationId: deleteEvent
      requestBody:
        description: Event object to delete and its calendar ID
        content:
          application/json:
            schema:
              type: object
              description: event object and its calendar ID
              properties:
                eventId: 
                  type: string
                  description: the ID of the event to delete
                calendarId: 
                  type: string
                  description: the ID of the event's calendar
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventSuccessResponse'  
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid user session
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Event does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'  
  /event_type:
    post:
      tags:
        - event_type
      summary: Create an event type
      description: Adds a new event type to the database.
      operationId: createEventType
      requestBody:
        description: Event type object to create
        content:
          application/json:
            schema:
              type: object
              description: an object containing the event type to add.
              properties:
                event_type:
                  type: object
                  $ref: "#/components/schemas/EventType"
      responses:
        '201':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventTypeSuccessResponse'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid user session
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - event_type
      summary: Update an event type
      description: Updates the specified event type in the database.
      operationId: updateEventType
      requestBody:
        description: Event type to update with its new values
        content:
          application/json:
            schema:
              type: object
              description: an object containing the event type to update.
              properties:
                event_type:
                  type: object
                  $ref: "#/components/schemas/EventType"
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventTypeSuccessResponse'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Current user is not authorized to edit this event type
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event type does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /event_type/{id}:
    get:
      summary: Get an event type
      tags:
        - event_type
      description: Retrieves an event type by ID from the database.
      operationId: getEventType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the event type to retrieve
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventTypeSuccessResponse'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event type does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an event type
      tags:
        - event_type
      description: Deletes an event type by ID from the database.
      operationId: deleteEventType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the event type to delete
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/EventTypeSuccessResponse'
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Current user is not authorized to delete this event type
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event type does not exist
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /message/thread:
    post:
      tags:
        - thread
      description: Create a new thread with name and users with no messages
      operationId: createThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thread'
      responses:
        '201':
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /message/thread/{id}:
    post:
      tags:
        - thread
      description: Add a message to an existing thread by ID
      operationId: addMessageToThread
      parameters:
        - in: path
          name: id
          description: ID of the thread
          required: true
          schema:
            type: string
      requestBody:
        description: Message data
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Message'
              
      responses:
        '200':
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'                
    get:
      summary: Retrieve thread by ID
      tags:
        - thread
      description: Retrieve thread information by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the thread to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /message/thread/userThreads/{id}:
    get:
      summary: Retrieve threads by user ID
      tags:
        - thread
      description: Retrieve all threads that have a user ID in their group array
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve threads for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thread'
        '404':
          description: No threads found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'        
  /preferences/{username}:
    put:
      tags:
        - preferences
      description: updates a user's preferences so that their theme will be the way they want every time they log in.
      operationId: updatePreferences
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: username of the user whos preferences we are updating.
        - in: query
          name: changes
          schema:
            type: object
          required: false
          description: the changes that you wish to make to the current preferences.
      responses:
        '200':
          description: update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: update failed - username required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: update failed - invalid username.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: update failed - internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /usage:
    get:
      tags:
        - usage
      description: gets Cal Pal's usage statistics for developers to know more about how the app is being used.
      operationId: getAllStats
      responses:
        '200':
          description: retrieval successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /user:
    post:
      tags:
        - user
      description: create a new user account.
      operationId: createUser
      parameters:
        - in: query
          name: user
          type: object
          $ref: '#/components/schemas/User'
      responses:
        '201':
          description: account creation success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: account creation failure - bad body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: account creation failure - username already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: account creation failure - internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user
      description: deletes a user from the database.
      operationId: deleteUser
      parameters:
        - in: query
          name: login
          type: object
          $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: account deletion successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: account deletion failure - bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: account deletion failure - authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: account deletion failure - internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user
      description: update the data stored with a user that already exists.
      operationId: updateUser
      parameters:
        - in: query
          name: login
          schema:
            $ref: '#/components/schemas/Login'
        - in: query
          name: changes
          schema:
            type: object
          required: true
      responses:
        '200':
          description: update success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: update failure - bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: update failure - authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: update failure - internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{un}:
    get:
      tags:
        - user
      description: Search for users by username. Search is non-strict and case insenstitive ("B1G" will turn up "b1gd3vd0g").
      operationId: searchByUsername
      parameters:
        - in: path
          name: un
          description: username of the account we are trying to authenticate.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: authentication success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: bad request - check body parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: no matches were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'      
  # External web services: (from Google)
  /weather/summary:
    get:
      tags:
        - weather
      summary: "Get forecast summary"
      description: Returns a summary of the forecast at the provided location for the specified day.
      operationId: getWeatherSummary
      parameters:
        - in: header
          name: lat
          required: true
          schema:
            type: number
          description: Latitude of the location
        - in: header
          name: lng
          required: true
          schema:
            type: number
          description: Longitude of the location
        - in: header
          name: daysahead
          required: true
          schema:
            type: number
          description: Number of days ahead of today to get the forecast for
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: "Summary of the forecast for the specified location/day"
                properties:
                  success:
                    type: boolean
                  summary:
                    type: string
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  /location/{query}:
    get:
      tags:
        - location
      summary: "Get location from query"
      description: Gets a latitude and longitude associated with the query.
      operationId: getLocationFromQuery
      requestBody:
        description: object containing the query string.
        content:
          application/json:
            schema:
              type: object
              description: object containing the query string.
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema: 
                type: object
                description: "Response data for the query."
                properties:
                  success:
                    type: boolean
                  lat:
                    type: number
                  long:
                    type: number
        '400':
          description: Invalid input
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No location found for the query
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
# Components
components:
  schemas:
    Calendar:
      type: object
      description: a collection of events of certain types, belonging to a certain user.
      properties:
        _id: 
          type: string
        name:
          type: string
        userId:
          type: string
          description: the ObjectId of the owner of this calendar.
        event_types:
          type: array
          description: stores ObjectId's for event types.
          items:
            type: string
        events:
          type: array
          description: stores ObjectId's for events.
          items:
            type: string
    Date:
      type: object
      properties:
        year:
          type: number
          description: the year.
        month:
          type: number
          description: the number of the month.
          minimum: 1 # january
          maximum: 12 # december
        day:
          oneOf:
            - type: number
              description: for when the number day of the month is important (most common)
              minimum: 1
              maximum: 31
            - type: object
              description: for when the week of the month and the day of the week are important
              properties:
                index: 
                  type: number
                  description: which week of the month marks this event
                  minimum: 1
                  maximum: 5 # there's never more than five of one day in any month
                dow: 
                  type: number
                  description: which day of the week marks this event
                  minimum: 0
                  maximum: 6
        hour:
          type: number
          minimum: 0
          maximum: 23
        minute:
          type: number
          minimum: 0
          maximum: 59
    Event:
      type: object
      properties:
        _id: 
          type: string
          description: the ID of the event
        name:
          type: string
          description: the name a user defines to identify their event.
        type:
          type: string
          description: the ID of the event's type
        start:
          type: object
          description: start date and time
          properties:
            date: 
              type: string
              description: the start date in YYYY-MM-DD format
            time:
              type: string
              description: the start time in HH:MM format (24 hour time)
        end:
          type: object
          description: end date and time
          properties:
            date: 
              type: string
              description: the end date in YYYY-MM-DD format
            time:
              type: string
              description: the end time in HH:MM format (24 hour time)
        custom_fields:
          type: object 
          description: stores the custom fields of the event in key-value pairs
    EventField:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        required:
          type: boolean
      description: defines a field name
    EventType:
      type: object
      properties:
        name: 
          type: string
        _id:
          type: string
        fields:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/EventField'
      description: defines required and optional fields for an event
    EventRequestBody:
      type: object
      description: event object and its calendar ID
      properties:
        event: 
          $ref: '#/components/schemas/Event'
        calendarId: 
          type: string
          description: the ID of the event's calendar
    EventSuccessResponse:
      type: object
      description: Success boolean and the event object
      properties:
        success: 
         type: boolean
        event:
          type: object
          $ref: '#/components/schemas/Event'
    EventTypeSuccessResponse:
      type: object
      description: Success boolean and the event type object
      properties:
        success: 
         type: boolean
        event_type:
          type: object
          $ref: '#/components/schemas/EventType'
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: message to the user about what went wrong
      description: http response
    Login:
      type: object
      properties:
        un:
          type: string
          description: username
        pw:
          type: string
          description: username
      description: username and password
    Preferences:
      type: object
      description: how the user wants their app to be set up
    SuccessResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
          description: the return value of the response, where applicable
    User:
      type: object
      properties:
        email: 
          type: string
          description: the email address associated with this user account.
        _id:
          type: object
          description: the mongodb id.
        login:
          type: object
          $ref: '#/components/schemas/Login'
          description: this user's login
        phone:
          type: number
          description: the phone number associated with this user account.
        preferences:
          type: object
          $ref: '#/components/schemas/Preferences'
          description: this user's preferences
    Message:
      type: object
      properties:
        text:
          type: string
          description: The message text
        sender:
          type: string
          description: The sender of the message
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the message was created
    Thread:
      type: object
      properties:
        group:
          type: array
          items:
            type: string
            description: The user IDs in the thread group
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: The messages in the thread
        name:
          type: string
          description: The name of the thread